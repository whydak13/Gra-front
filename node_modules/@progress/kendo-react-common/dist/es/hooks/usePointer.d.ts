import * as React from 'react';
import { KendoPointer } from '../models';
declare type ElementPointer = {
    [P in keyof KendoPointer<any, any>]: (event: React.PointerEvent<any>) => void;
};
/**
 * @hidden
 */
export declare const usePointer: <E extends HTMLElement, P extends KendoPointer<any, any>, R extends {}>(props: P, target: React.RefObject<R>, extend?: {
    onPointerDown?: (args: React.PointerEvent<E>) => void;
    onPointerMove?: (args: React.PointerEvent<E>) => void;
    onPointerUp?: (args: React.PointerEvent<E>) => void;
    onPointerCancel?: (args: React.PointerEvent<E>) => void;
    onGotPointerCapture?: (args: React.PointerEvent<E>) => void;
    onLostPointerCapture?: (args: React.PointerEvent<E>) => void;
    onPointerEnter?: (args: React.PointerEvent<E>) => void;
    onPointerOver?: (args: React.PointerEvent<E>) => void;
    onPointerLeave?: (args: React.PointerEvent<E>) => void;
    onPointerOut?: (args: React.PointerEvent<E>) => void;
}) => ElementPointer;
export {};
