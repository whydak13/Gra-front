var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { Chip } from '@progress/kendo-react-buttons';
var preventDefault = function (event) { return event.syntheticEvent.preventDefault(); };
var stopPropagation = function (event) { return event.syntheticEvent.stopPropagation(); };
/**
 * @hidden
 */
var TagList = /** @class */ (function (_super) {
    __extends(TagList, _super);
    function TagList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TagList.prototype.render = function () {
        var _a = this.props, data = _a.data, guid = _a.guid, focused = _a.focused, tagRender = _a.tagRender, TagComponent = _a.tag, onTagDelete = _a.onTagDelete, size = _a.size;
        return (React.createElement(React.Fragment, null,
            data.map(function (tagData, index) {
                var tag = TagComponent ? (React.createElement(TagComponent, { key: tagData.text + index, tagData: tagData, guid: guid, focusedTag: focused, onTagDelete: onTagDelete })) : (React.createElement(Chip, { id: "tag-" + guid + "-" + tagData.text.replace(/\s+/g, '-'), "aria-selected": true, role: "option", "aria-setsize": data.length, key: tagData.text + index, text: tagData.text, removable: true, removeIcon: 'k-i-close', onRemove: function (e) { return onTagDelete.call(undefined, tagData.data, e.syntheticEvent); }, onMouseDown: preventDefault, onClick: stopPropagation, className: tagData === focused ? 'k-focus' : undefined, size: size }));
                return tagRender ? tagRender(tagData, tag) : tag;
            }),
            this.props.children));
    };
    return TagList;
}(React.Component));
export default TagList;
