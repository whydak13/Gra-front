import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ButtonInterface } from './ButtonInterface';
/**
 * Represents the props of the [KendoReact Button component]({% slug overview_button %}).
 * Extends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).
 */
export interface ButtonProps extends ButtonInterface, React.ButtonHTMLAttributes<HTMLButtonElement> {
    /**
     * @hidden
     */
    children?: React.ReactNode;
    /**
     * Configures the `size` of the Button.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `shape` of the Button.
     *
     * The available options are:
     * - rectangle
     * - square
     * - null&mdash;Does not set a shape `className`.
     *
     * @default `rectangle`
     */
    shape?: null | 'rectangle' | 'square';
    /**
     * Configures the `roundness` of the Button.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the Button.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - link
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | 'link';
    /**
     * Configures the `themeColor` of the Button.
     *
     * The available options are:
     * - base
     * - primary
     * - secondary
     * - tertiary
     * - info
     * - success
     * - warning
     * - error
     * - dark
     * - light
     * - inverse
     * - null&mdash;Does not set a themeColor `className`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse';
}
/**
 * @hidden
 */
export interface ButtonState {
    selected: boolean;
}
export default class Button extends React.Component<ButtonProps, ButtonState> {
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        selected: PropTypes.Requireable<boolean>;
        togglable: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<string>;
        iconClass: PropTypes.Requireable<string>;
        imageUrl: PropTypes.Requireable<string>;
        imageAlt: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        shape: PropTypes.Requireable<string>;
        rounded: PropTypes.Requireable<string>;
        fillMode: PropTypes.Requireable<string>;
        themeColor: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        togglable: boolean;
        size: string;
        shape: string;
        rounded: string;
        fillMode: string;
        themeColor: string;
    };
    /**
     * @hidden
     */
    readonly state: ButtonState;
    private _selectedTemp?;
    private _element;
    /**
     * Gets the DOM element of the Button component.
     */
    readonly element: HTMLButtonElement | null;
    /**
     * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).
     * Otherwise, returns `false`.
     */
    readonly selected: boolean;
    constructor(props: any);
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ButtonProps, state: ButtonState): {
        selected: boolean;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
    private toggleIfApplicable;
    private handleClick;
}
